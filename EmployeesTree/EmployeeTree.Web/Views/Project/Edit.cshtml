@model EmployeeTree.Web.ViewModels.ProjectWithTeamsViewModel
@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm("Edit", "Project", FormMethod.Post, new { id = "beginForm", @class = "createForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Project</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Delivery, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.Delivery, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Delivery, "", new { @class = "text-danger" })
            </div>
        </div>

        <button type="button" class="btn btn-default btn-sm" id="add-team-btn">
            Add team
            <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
        </button>
        <table class="table" id="tableTeams">

            @Html.Label("Choose team: ", new { @class = "control-label col-md-2" })


            @if (Model.Teams != null)
            {
                foreach (var team in Model.Teams)
                {
                    int index = Model.Teams.IndexOf(team);
                    <tr>
                        <td>
                            <div class="form-group">
                                @Html.Label("Project team: ", new { @class = "control-label col-md-3" })
                                @Html.DisplayFor(m => m.Teams[index].NameAndDelivery)
                                @Html.HiddenFor(m => m.Teams[index].Id, new { data_container = "teams" })
                            </div>
                        </td>
                        <td>
                            <button type="button" class="btn btn-default btn-group-sm" id="delete-employee-btn">
                                Delete
                                <span class="glyphicon glyphicon-trash" aria-hidden="true"></span>
                            </button>
                        </td>
                    </tr>
                }
            }

        </table>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Edit" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<table>
    <tr id="template-row">
        <td class="col-md-10">
            @Html.Label("Choose team: ", new { @class = "control-label col-md-2" })
            @Html.DropDownList("Teams[index].Id", (SelectList)ViewBag.Teams, "Select team", new { data_container = "teams", @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Teams, "", new { @class = "text-danger" })
        </td>
        <td id="td-delete-team">
            <button type="button" class="btn btn-default btn-group-sm removeRow" id="delete-team-btn">
                Delete
                <span class="glyphicon glyphicon-trash" aria-hidden="true"></span>
            </button>
        </td>
    </tr>
</table>


<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/project.add-remove.teams.js"></script>
    <script src="~/Scripts/project.onSubmit.js"></script>
}
